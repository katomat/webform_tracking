<?php
/**
 * @file
 * Adds user-tracking capabilities to webform.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds an option to decide if DNT should be respected to webforms admin
 * settings.
 */
function webform_tracking_form_webform_admin_settings_alter(&$form, &$form_state, $form_id) {
  $form['webform_tracking'] = array(
    '#type' => 'fieldset',
    '#title' => t('Webform Tracking'),
    '#collapsible' => TRUE,
    '#weight' => 10,
  );

  $form['webform_tracking']['webform_tracking_respect_dnt'] = array(
    '#type' => 'checkbox',
    '#title' => t('Respect <a href="http://www.mozilla.org/en-US/dnt/">Do Not Track</a>'),
    '#default_value' => variable_get('webform_tracking_respect_dnt', TRUE),
  );

  array_unshift($form['#submit'], 'webform_tracking_webform_admin_settings_submit');
}

/**
 * Submit handler to set the variable 'webform_tracking_respect_dnt'.
 */
function webform_tracking_webform_admin_settings_submit(&$form, &$form_state) {
  variable_set('webform_tracking_respect_dnt', $form_state['values']['webform_tracking_respect_dnt']);
}

/**
 * Implements hook_form_alter().
 */
function webform_tracking_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'webform_client_form') !== 0) {
    return;
  }

  drupal_add_js('/misc/jquery.cookie.js', 'file');
  drupal_add_js(array(
      'webform_tracking' => array(
        'respect_dnt' => variable_get('webform_tracking_respect_dnt', TRUE),
        'base_url' => $GLOBALS['base_url']
      )), 'setting');

  $form['#attached']['js'][] = drupal_get_path('module', 'webform_tracking') .
    '/webform_tracking.js';

}

/**
 * Add tracking data to submissions objects in $submission->tracking.
 *
 * @param mixed $submissions
 *   A webform submission object or an array of webform submission objects
 *   keyed by their sid.
 */
function webform_tracking_load($submissions) {
  if (is_object($submissions)) {
    $submissions = array($submissions->sid => $submissions);
  }
  $result = db_select('webform_tracking', 't')
    ->fields('t')
    ->condition('sid', array_keys($submissions), 'IN')
    ->execute();
  foreach ($result as $row) {
    $submissions[$row->sid]->tracking = $row;
  }
}

/**
 * Implements hook_webform_submission_insert().
 *
 * Save tracking data along with the submission
 */
function webform_tracking_webform_submission_insert($node, $submission) {
  $parameters = array(
    'tags' => '',
    'external_referer' => '',
    'source' => '',
    'medium' => '',
    'version' => '',
    'other' => '',
    'term' => '',
    'campaign' => '',
  );

  $cookie_data = drupal_json_decode($_COOKIE['webform_tracking']);
  setcookie('webform_tracking', drupal_json_encode(array(
        'user_id' => $cookie_data['user_id'])));

  foreach ($parameters as $name => $value) {
    $parameters[$name] = isset($cookie_data[$name]) ? $cookie_data[$name]: '';

    if (!is_array($parameters[$name])) {
      $parameters[$name] = check_plain($parameters[$name]);
    }
    else {
      foreach ($parameters[$name] as $key => $value) {
        $parameters[$name][$key] = check_plain($value);
      }
    }
  }

  $parameters['tags'] = serialize($parameters['tags']);

  $server_data = array(
    'ip_address' => ip_address()
  );

  if (function_exists('geoip_country_code_by_name')) {
    // Use @, see: https://bugs.php.net/bug.php?id=59753
    $server_data['country'] = @geoip_country_code_by_name(ip_address());
  }

  $history = isset($cookie_data['history']) ? $cookie_data['history'] : array('');
  $length = count($history);

  $urls = array(
    'entry_url' => $history[0],
    // The only situation when $history should be < 3 appears if the user opens
    // the form directly, in this case referer and form_url are the same.
    'referer'   => isset($history[$length - 3]) ? $history[$length - 3] : $history[0],
    'form_url'  => isset($history[$length - 2]) ? $history[$length - 2] : $history[0],
  );

  $data = array(
    'nid' => $submission->nid,
    'sid' => $submission->sid,
    'user_id' => $cookie_data['user_id'],
  ) + $urls + $parameters + $server_data;
  $submission->tracking = (object) $data;

  db_insert('webform_tracking')->fields($data)->execute();
}

/**
 * Implements hook_webform_submission_delete().
 *
 * Delete tracking data when the corresponding submission is deleted.
 */
function webform_tracking_webform_submission_delete($node, $submission) {
  db_delete('webform_tracking')
    ->condition('nid', $node->nid)
    ->condition('sid', $submission->sid)
    ->execute();
}

/**
 * Implements hook_webform_submission_load().
 */
function webform_tracking_webform_submission_load(&$submissions) {
  $sids = array_keys($submissions);
  if (empty($sids)) {
    return;
  }
  $result = db_select('webform_tracking', 't')
    ->fields('t')
    ->condition('sid', $sids, 'IN')
    ->execute();
  foreach ($result as $data) {
    $sid = $data->sid;
    unset($data->nid);
    unset($data->sid);
    $data->tags = empty($data->tags) ? array() : unserialize($data->tags);
    $submissions[$sid]->tracking = $data;
  }
}

/**
 * Implements hook_webform_results_download_submission_information_info().
 */
function webform_tracking_webform_results_download_submission_information_info() {
  $p = 'webform_tracking_';
  return array(
    $p . 'referer' => t('Referer'),
    $p . 'external_referer' => t('External referer'),
    $p . 'form_url' => t('Form URL'),
    $p . 'tags' => t('Tags'),
    $p . 'entry_url' => t('Entry URL'),
    $p . 'source' => t('Source'),
    $p . 'medium' => t('Channel'),
    $p . 'version' => t('Version'),
    $p . 'other' => t('Other'),
    $p . 'user_id' => t('User-ID'),
    $p . 'country' => t('Country'),
    $p . 'term' => t('Terms'),
    $p . 'campaign' => t('Campaign'),
  );
}

/**
 * Implements hook_webform_results_download_submission_information_data().
 */
function webform_tracking_webform_results_download_submission_information_data($submission, array $options, $serial_start, $row_count) {
  if (!isset($submission->tracking)) {
    return;
  }
  $data = array();
  $p = 'webform_tracking_';
  foreach ($submission->tracking as $key => $value) {
    $data[$p . $key] = $value;
  }
  if (isset($data[$p . 'tags'])) {
    $data[$p . 'tags'] = implode(', ', $data[$p . 'tags']);
  }
  return $data;
}
